const nodemailer = require('nodemailer');

class EmailService {
  constructor() {
    this.transporter = null;
    this.initialized = false;
    this.setupTransporter();
  }

  /**
   * Setup email transporter
   */
  setupTransporter() {
    try {
      this.transporter = nodemailer.createTransport({
        service: process.env.EMAIL_SERVICE || 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
        },
        secure: true,
        port: 465
      });

      // Verify connection
      this.transporter.verify((error, success) => {
        if (error) {
          console.error('‚ùå Email service configuration error:', error);
        } else {
          console.log('‚úÖ Email service ready');
          this.initialized = true;
        }
      });
    } catch (error) {
      console.error('‚ùå Failed to setup email transporter:', error);
    }
  }

  /**
   * Send email verification
   */
  async sendEmailVerification(email, token, firstName = '') {
    try {
      if (!this.initialized) {
        throw new Error('Email service not initialized');
      }

      const verificationUrl = `${process.env.CLIENT_URL}/verify-email/${token}`;
      
      const mailOptions = {
        from: process.env.EMAIL_FROM || 'Vietnam Stock Tracker <noreply@vietnamstocktracker.com>',
        to: email,
        subject: 'X√°c th·ª±c email - Vietnam Stock Tracker',
        html: this.getEmailVerificationTemplate(firstName, verificationUrl)
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('‚úÖ Email verification sent to:', email);
      return result;
    } catch (error) {
      console.error('‚ùå Error sending email verification:', error);
      throw error;
    }
  }

  /**
   * Send password reset email
   */
  async sendPasswordReset(email, token, firstName = '') {
    try {
      if (!this.initialized) {
        throw new Error('Email service not initialized');
      }

      const resetUrl = `${process.env.CLIENT_URL}/reset-password/${token}`;
      
      const mailOptions = {
        from: process.env.EMAIL_FROM || 'Vietnam Stock Tracker <noreply@vietnamstocktracker.com>',
        to: email,
        subject: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Vietnam Stock Tracker',
        html: this.getPasswordResetTemplate(firstName, resetUrl)
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('‚úÖ Password reset email sent to:', email);
      return result;
    } catch (error) {
      console.error('‚ùå Error sending password reset:', error);
      throw error;
    }
  }

  /**
   * Send alert notification
   */
  async sendAlertNotification(email, firstName, symbol, message, alertData) {
    try {
      if (!this.initialized) {
        throw new Error('Email service not initialized');
      }

      const subject = `üîî C·∫£nh b√°o ${symbol} - Vietnam Stock Tracker`;
      
      const mailOptions = {
        from: process.env.EMAIL_FROM || 'Vietnam Stock Tracker <noreply@vietnamstocktracker.com>',
        to: email,
        subject: subject,
        html: this.getAlertNotificationTemplate(firstName, symbol, message, alertData)
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log(`‚úÖ Alert notification sent to: ${email} for ${symbol}`);
      return result;
    } catch (error) {
      console.error('‚ùå Error sending alert notification:', error);
      throw error;
    }
  }

  /**
   * Send weekly portfolio report
   */
  async sendWeeklyReport(email, firstName, reportData) {
    try {
      if (!this.initialized) {
        throw new Error('Email service not initialized');
      }

      const subject = `üìä B√°o c√°o tu·∫ßn - Vietnam Stock Tracker`;
      
      const mailOptions = {
        from: process.env.EMAIL_FROM || 'Vietnam Stock Tracker <noreply@vietnamstocktracker.com>',
        to: email,
        subject: subject,
        html: this.getWeeklyReportTemplate(firstName, reportData)
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log(`‚úÖ Weekly report sent to: ${email}`);
      return result;
    } catch (error) {
      console.error('‚ùå Error sending weekly report:', error);
      throw error;
    }
  }

  /**
   * Send market news digest
   */
  async sendNewsDigest(email, firstName, newsItems) {
    try {
      if (!this.initialized) {
        throw new Error('Email service not initialized');
      }

      const subject = `üì∞ T√≥m t·∫Øt tin t·ª©c th·ªã tr∆∞·ªùng - Vietnam Stock Tracker`;
      
      const mailOptions = {
        from: process.env.EMAIL_FROM || 'Vietnam Stock Tracker <noreply@vietnamstocktracker.com>',
        to: email,
        subject: subject,
        html: this.getNewsDigestTemplate(firstName, newsItems)
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log(`‚úÖ News digest sent to: ${email}`);
      return result;
    } catch (error) {
      console.error('‚ùå Error sending news digest:', error);
      throw error;
    }
  }

  /**
   * Email verification template
   */
  getEmailVerificationTemplate(firstName, verificationUrl) {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>X√°c th·ª±c Email</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
            .header { text-align: center; margin-bottom: 30px; }
            .logo { font-size: 24px; font-weight: bold; color: #2563eb; }
            .button { display: inline-block; padding: 12px 30px; background: #2563eb; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 12px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo">üìä Vietnam Stock Tracker</div>
            </div>
            
            <h2>Xin ch√†o ${firstName}!</h2>
            
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n Vietnam Stock Tracker. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng x√°c th·ª±c ƒë·ªãa ch·ªâ email c·ªßa b·∫°n.</p>
            
            <div style="text-align: center;">
                <a href="${verificationUrl}" class="button">X√°c th·ª±c Email</a>
            </div>
            
            <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
            <p style="word-break: break-all; color: #666;">${verificationUrl}</p>
            
            <p><strong>L∆∞u √Ω:</strong> Link x√°c th·ª±c s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
            
            <p>N·∫øu b·∫°n kh√¥ng ƒëƒÉng k√Ω t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
            
            <div class="footer">
                <p>Vietnam Stock Tracker - Theo d√µi danh m·ª•c ƒë·∫ßu t∆∞ ch·ª©ng kho√°n Vi·ªát Nam</p>
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  /**
   * Password reset template
   */
  getPasswordResetTemplate(firstName, resetUrl) {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
            .header { text-align: center; margin-bottom: 30px; }
            .logo { font-size: 24px; font-weight: bold; color: #2563eb; }
            .button { display: inline-block; padding: 12px 30px; background: #dc2626; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 12px; }
            .warning { background: #fef3c7; padding: 15px; border-radius: 5px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo">üìä Vietnam Stock Tracker</div>
            </div>
            
            <h2>Xin ch√†o ${firstName}!</h2>
            
            <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
            
            <div style="text-align: center;">
                <a href="${resetUrl}" class="button">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
            </div>
            
            <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
            <p style="word-break: break-all; color: #666;">${resetUrl}</p>
            
            <div class="warning">
                <p><strong>‚ö†Ô∏è L∆∞u √Ω b·∫£o m·∫≠t:</strong></p>
                <ul>
                    <li>Link n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t</li>
                    <li>Ch·ªâ s·ª≠ d·ª•ng link n√†y n·∫øu b·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</li>
                    <li>Kh√¥ng chia s·∫ª link n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                </ul>
            </div>
            
            <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y v√† t√†i kho·∫£n c·ªßa b·∫°n s·∫Ω v·∫´n an to√†n.</p>
            
            <div class="footer">
                <p>Vietnam Stock Tracker - Theo d√µi danh m·ª•c ƒë·∫ßu t∆∞ ch·ª©ng kho√°n Vi·ªát Nam</p>
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  /**
   * Alert notification template
   */
  getAlertNotificationTemplate(firstName, symbol, message, alertData) {
    const priceColor = alertData.change >= 0 ? '#16a34a' : '#dc2626';
    const changePrefix = alertData.change >= 0 ? '+' : '';
    
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>C·∫£nh b√°o ${symbol}</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
            .header { text-align: center; margin-bottom: 30px; }
            .logo { font-size: 24px; font-weight: bold; color: #2563eb; }
            .alert-box { background: #fef3c7; border-left: 4px solid #f59e0b; padding: 20px; margin: 20px 0; }
            .price-info { background: #f9fafb; padding: 20px; border-radius: 8px; margin: 20px 0; }
            .price { font-size: 24px; font-weight: bold; color: ${priceColor}; }
            .change { color: ${priceColor}; font-weight: bold; }
            .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 12px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo">üìä Vietnam Stock Tracker</div>
            </div>
            
            <h2>üîî C·∫£nh b√°o ${symbol}</h2>
            
            <p>Xin ch√†o ${firstName}!</p>
            
            <div class="alert-box">
                <h3>C·∫£nh b√°o ƒë∆∞·ª£c k√≠ch ho·∫°t</h3>
                <p>${message}</p>
            </div>
            
            <div class="price-info">
                <h4>Th√¥ng tin gi√° hi·ªán t·∫°i:</h4>
                <div class="price">${alertData.currentPrice.toLocaleString()} VND</div>
                <div class="change">
                    ${changePrefix}${alertData.change.toLocaleString()} VND (${changePrefix}${alertData.changePercent.toFixed(2)}%)
                </div>
                <p><strong>Lo·∫°i c·∫£nh b√°o:</strong> ${this.getAlertTypeText(alertData.alertType)}</p>
                <p><strong>ƒêi·ªÅu ki·ªán:</strong> ${this.getConditionText(alertData.condition, alertData.targetValue)}</p>
            </div>
            
            <p>Vui l√≤ng ki·ªÉm tra danh m·ª•c ƒë·∫ßu t∆∞ c·ªßa b·∫°n ƒë·ªÉ xem x√©t c√°c quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ ph√π h·ª£p.</p>
            
            <p style="text-align: center;">
                <a href="${process.env.CLIENT_URL}/dashboard" style="display: inline-block; padding: 12px 30px; background: #2563eb; color: white; text-decoration: none; border-radius: 5px;">
                    Xem Dashboard
                </a>
            </p>
            
            <div class="footer">
                <p>Vietnam Stock Tracker - Theo d√µi danh m·ª•c ƒë·∫ßu t∆∞ ch·ª©ng kho√°n Vi·ªát Nam</p>
                <p>ƒê·ªÉ h·ªßy c·∫£nh b√°o n√†y, vui l√≤ng truy c·∫≠p trang qu·∫£n l√Ω c·∫£nh b√°o.</p>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  /**
   * Weekly report template
   */
  getWeeklyReportTemplate(firstName, reportData) {
    const totalReturnColor = reportData.totalReturn >= 0 ? '#16a34a' : '#dc2626';
    const returnPrefix = reportData.totalReturn >= 0 ? '+' : '';
    
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>B√°o c√°o tu·∫ßn</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
            .header { text-align: center; margin-bottom: 30px; }
            .logo { font-size: 24px; font-weight: bold; color: #2563eb; }
            .summary-box { background: #f9fafb; padding: 20px; border-radius: 8px; margin: 20px 0; }
            .metric { display: flex; justify-content: space-between; margin: 10px 0; }
            .value { font-weight: bold; }
            .positive { color: #16a34a; }
            .negative { color: #dc2626; }
            .portfolio { border: 1px solid #e5e7eb; border-radius: 8px; padding: 15px; margin: 15px 0; }
            .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 12px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo">üìä Vietnam Stock Tracker</div>
                <h2>B√°o c√°o tu·∫ßn</h2>
                <p>${reportData.weekStart} - ${reportData.weekEnd}</p>
            </div>
            
            <p>Xin ch√†o ${firstName}!</p>
            
            <p>D∆∞·ªõi ƒë√¢y l√† t√≥m t·∫Øt hi·ªáu su·∫•t danh m·ª•c ƒë·∫ßu t∆∞ c·ªßa b·∫°n trong tu·∫ßn qua:</p>
            
            <div class="summary-box">
                <h3>T·ªïng quan</h3>
                <div class="metric">
                    <span>T·ªïng gi√° tr·ªã danh m·ª•c:</span>
                    <span class="value">${reportData.totalValue.toLocaleString()} VND</span>
                </div>
                <div class="metric">
                    <span>T·ªïng l·ª£i nhu·∫≠n/l·ªó:</span>
                    <span class="value ${reportData.totalReturn >= 0 ? 'positive' : 'negative'}">
                        ${returnPrefix}${reportData.totalReturn.toLocaleString()} VND (${returnPrefix}${reportData.totalReturnPercent.toFixed(2)}%)
                    </span>
                </div>
                <div class="metric">
                    <span>Thay ƒë·ªïi trong tu·∫ßn:</span>
                    <span class="value ${reportData.weekChange >= 0 ? 'positive' : 'negative'}">
                        ${reportData.weekChange >= 0 ? '+' : ''}${reportData.weekChange.toLocaleString()} VND
                    </span>
                </div>
            </div>
            
            <h3>Danh m·ª•c c·ªßa b·∫°n</h3>
            ${reportData.portfolios.map(portfolio => `
                <div class="portfolio">
                    <h4>${portfolio.name}</h4>
                    <div class="metric">
                        <span>Gi√° tr·ªã:</span>
                        <span class="value">${portfolio.currentValue.toLocaleString()} VND</span>
                    </div>
                    <div class="metric">
                        <span>Thay ƒë·ªïi tu·∫ßn:</span>
                        <span class="value ${portfolio.weekChange >= 0 ? 'positive' : 'negative'}">
                            ${portfolio.weekChange >= 0 ? '+' : ''}${portfolio.weekChange.toLocaleString()} VND
                        </span>
                    </div>
                    <div class="metric">
                        <span>S·ªë m√£ c·ªï phi·∫øu:</span>
                        <span class="value">${portfolio.stockCount}</span>
                    </div>
                </div>
            `).join('')}
            
            <h3>Top c·ªï phi·∫øu hi·ªáu su·∫•t t·ªët nh·∫•t</h3>
            <ul>
                ${reportData.topPerformers.map(stock => `
                    <li>${stock.symbol}: ${stock.change >= 0 ? '+' : ''}${stock.changePercent.toFixed(2)}%</li>
                `).join('')}
            </ul>
            
            <p style="text-align: center; margin-top: 30px;">
                <a href="${process.env.CLIENT_URL}/dashboard" style="display: inline-block; padding: 12px 30px; background: #2563eb; color: white; text-decoration: none; border-radius: 5px;">
                    Xem chi ti·∫øt
                </a>
            </p>
            
            <div class="footer">
                <p>Vietnam Stock Tracker - Theo d√µi danh m·ª•c ƒë·∫ßu t∆∞ ch·ª©ng kho√°n Vi·ªát Nam</p>
                <p>ƒê·ªÉ h·ªßy b√°o c√°o tu·∫ßn, vui l√≤ng c·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o trong t√†i kho·∫£n.</p>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  /**
   * News digest template
   */
  getNewsDigestTemplate(firstName, newsItems) {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>T√≥m t·∫Øt tin t·ª©c th·ªã tr∆∞·ªùng</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
            .header { text-align: center; margin-bottom: 30px; }
            .logo { font-size: 24px; font-weight: bold; color: #2563eb; }
            .news-item { border-bottom: 1px solid #e5e7eb; padding: 20px 0; }
            .news-title { font-weight: bold; color: #1f2937; margin-bottom: 10px; }
            .news-summary { color: #6b7280; margin-bottom: 10px; }
            .news-meta { font-size: 12px; color: #9ca3af; }
            .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 12px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo">üìä Vietnam Stock Tracker</div>
                <h2>üì∞ T√≥m t·∫Øt tin t·ª©c th·ªã tr∆∞·ªùng</h2>
            </div>
            
            <p>Xin ch√†o ${firstName}!</p>
            
            <p>D∆∞·ªõi ƒë√¢y l√† nh·ªØng tin t·ª©c quan tr·ªçng nh·∫•t v·ªÅ th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam h√¥m nay:</p>
            
            ${newsItems.map(news => `
                <div class="news-item">
                    <div class="news-title">${news.title}</div>
                    <div class="news-summary">${news.summary}</div>
                    <div class="news-meta">
                        ${news.source} ‚Ä¢ ${news.publishTime} ‚Ä¢ ${news.category}
                    </div>
                </div>
            `).join('')}
            
            <p style="text-align: center; margin-top: 30px;">
                <a href="${process.env.CLIENT_URL}/news" style="display: inline-block; padding: 12px 30px; background: #2563eb; color: white; text-decoration: none; border-radius: 5px;">
                    ƒê·ªçc th√™m tin t·ª©c
                </a>
            </p>
            
            <div class="footer">
                <p>Vietnam Stock Tracker - Theo d√µi danh m·ª•c ƒë·∫ßu t∆∞ ch·ª©ng kho√°n Vi·ªát Nam</p>
                <p>ƒê·ªÉ h·ªßy t√≥m t·∫Øt tin t·ª©c, vui l√≤ng c·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o trong t√†i kho·∫£n.</p>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  /**
   * Helper methods for alert templates
   */
  getAlertTypeText(type) {
    const types = {
      'price': 'C·∫£nh b√°o gi√°',
      'volume': 'C·∫£nh b√°o kh·ªëi l∆∞·ª£ng',
      'percent-change': 'C·∫£nh b√°o thay ƒë·ªïi %',
      'technical': 'C·∫£nh b√°o k·ªπ thu·∫≠t',
      'news': 'C·∫£nh b√°o tin t·ª©c'
    };
    return types[type] || type;
  }

  getConditionText(condition, value) {
    const conditions = {
      'above': `Tr√™n ${value?.toLocaleString()} VND`,
      'below': `D∆∞·ªõi ${value?.toLocaleString()} VND`,
      'percent-change-up': `TƒÉng ${value}%`,
      'percent-change-down': `Gi·∫£m ${value}%`,
      'volume-spike': 'Kh·ªëi l∆∞·ª£ng ƒë·ªôt bi·∫øn',
      'new-high': 'ƒê·∫°t ƒë·ªânh 52 tu·∫ßn',
      'new-low': 'ƒê·∫°t ƒë√°y 52 tu·∫ßn'
    };
    return conditions[condition] || condition;
  }

  /**
   * Test email configuration
   */
  async testConnection() {
    try {
      if (!this.transporter) {
        throw new Error('Transporter not initialized');
      }

      await this.transporter.verify();
      console.log('‚úÖ Email connection test successful');
      return true;
    } catch (error) {
      console.error('‚ùå Email connection test failed:', error);
      return false;
    }
  }
}

module.exports = EmailService;
