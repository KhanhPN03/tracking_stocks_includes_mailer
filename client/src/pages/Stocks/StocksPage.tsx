import { useEffect, useState } from 'react';
import {
  Container,
  Grid,
  Paper,
  Typography,
  Box,
  TextField,
  InputAdornment,
  Card,
  CardContent,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  Tabs,
  Tab,
  Alert,
  AlertTitle,
} from '@mui/material';
import {
  Search,
  TrendingUp,
  TrendingDown,
  Star,
  StarBorder,
  Refresh,
  FilterList,
  ShowChart,
} from '@mui/icons-material';

import { useAppDispatch, useAppSelector } from '../../hooks/redux';
import {
  fetchStocks,
  fetchStockDetail,
  searchStocks,
  addToWatchlist,
  removeFromWatchlist,
  fetchTopStocks,
} from '../../store/slices/stockSlice';
import { websocketService } from '../../services/websocketService';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel({ children, value, index, ...other }: TabPanelProps) {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

function StocksPage() {
  const dispatch = useAppDispatch();
  const { stocks, isLoading, searchResults, watchlist, selectedStock } = useAppSelector((state) => state.stock);

  const [searchTerm, setSearchTerm] = useState('');
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(25);
  const [sortBy, setSortBy] = useState('volume');
  const [filterBy, setFilterBy] = useState('all');
  const [selectedStockSymbol, setSelectedStockSymbol] = useState<string | null>(null);
  const [tabValue, setTabValue] = useState(0);
  const [liveData, setLiveData] = useState<any>({});
  const [isRealDataAvailable, setIsRealDataAvailable] = useState(false);

  // Add state for market indices
  const [marketIndices, setMarketIndices] = useState({
    vnIndex: { value: 0, change: 0, changePercent: 0 },
    hnxIndex: { value: 0, change: 0, changePercent: 0 },
    upcomIndex: { value: 0, change: 0, changePercent: 0 },
    totalVolume: 0
  });

  useEffect(() => {
    dispatch(fetchStocks({}));

    // Connect to WebSocket for real-time updates
    websocketService.connect();
    
    websocketService.subscribeToUpdates((data) => {
      setLiveData(data);
    });

    // Calculate market summary from stocks data - NO FAKE DATA
    dispatch(fetchTopStocks()).then((action) => {
      if (action.payload && Array.isArray(action.payload)) {
        const stocks = action.payload;
        const totalVolume = stocks.reduce((sum: number, stock: any) => sum + (stock.volume || 0), 0);
        
        // Check if we have real data (any stock with non-zero change)
        const hasRealData = stocks.some((stock: any) => Math.abs(stock.dayChangePercent || 0) > 0);
        
        if (!hasRealData) {
          // No real data available - show error state instead of fake data
          setIsRealDataAvailable(false);
          setMarketIndices({
            vnIndex: { value: 0, change: 0, changePercent: 0 },
            hnxIndex: { value: 0, change: 0, changePercent: 0 },
            upcomIndex: { value: 0, change: 0, changePercent: 0 },
            totalVolume: 0
          });
        } else {
          setIsRealDataAvailable(true);
          // Calculate real market indices based on actual stock performance
          const avgChangePercent = stocks.reduce((sum: number, stock: any) => sum + (stock.dayChangePercent || 0), 0) / stocks.length;
          
          setMarketIndices({
            vnIndex: { 
              value: 0, // Real index values would come from market data API
              change: 0, 
              changePercent: avgChangePercent 
            },
            hnxIndex: { 
              value: 0, 
              change: 0, 
              changePercent: avgChangePercent * 0.8 
            },
            upcomIndex: { 
              value: 0, 
              change: 0, 
              changePercent: avgChangePercent * 0.5 
            },
            totalVolume: totalVolume / 1000000 // Convert to millions
          });
        }
      }
    });

    return () => {
      websocketService.disconnect();
    };
  }, [dispatch]);

  useEffect(() => {
    if (searchTerm) {
      const timer = setTimeout(() => {
        dispatch(searchStocks(searchTerm));
      }, 500);

      return () => clearTimeout(timer);
    }
  }, [searchTerm, dispatch]);

  useEffect(() => {
    if (selectedStockSymbol) {
      dispatch(fetchStockDetail(selectedStockSymbol));
    }
  }, [selectedStockSymbol, dispatch]);

  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  };

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleToggleWatchlist = (symbol: string) => {
    const isInWatchlist = watchlist.includes(symbol);
    if (isInWatchlist) {
      dispatch(removeFromWatchlist(symbol));
    } else {
      dispatch(addToWatchlist(symbol));
    }
  };

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
    }).format(value);
  };

  const formatPercentage = (value: number) => {
    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;
  };

  const getFilteredStocks = () => {
    let filtered = searchTerm ? searchResults : stocks;
    
    // Add null/undefined check
    if (!filtered || !Array.isArray(filtered)) {
      return [];
    }

    if (filterBy !== 'all') {
      filtered = filtered.filter(stock => {
        switch (filterBy) {
          case 'gainers':
            return stock.dayChangePercent > 0;
          case 'losers':
            return stock.dayChangePercent < 0;
          case 'watchlist':
            return watchlist.includes(stock.symbol);
          default:
            return true;
        }
      });
    }

    // Sort stocks
    filtered = [...filtered].sort((a, b) => {
      switch (sortBy) {
        case 'symbol':
          return a.symbol.localeCompare(b.symbol);
        case 'price':
          return b.currentPrice - a.currentPrice;
        case 'change':
          return b.dayChangePercent - a.dayChangePercent;
        case 'volume':
          return (b.volume || 0) - (a.volume || 0);
        default:
          return 0;
      }
    });

    return filtered;
  };

  const displayStocks = getFilteredStocks();
  const paginatedStocks = displayStocks.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);

  const getStockData = (stock: any) => {
    const liveStock = liveData[stock.symbol];
    return {
      ...stock,
      currentPrice: liveStock?.price || stock.currentPrice,
      changePercent: liveStock?.changePercent || stock.dayChangePercent,
      volume: liveStock?.volume || stock.volume,
    };
  };

  return (
    <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
        <Typography variant="h4" gutterBottom>
          Th·ªã tr∆∞·ªùng ch·ª©ng kho√°n
        </Typography>
        <Button
          variant="outlined"
          startIcon={<Refresh />}
          onClick={() => dispatch(fetchStocks({}))}
        >
          L√†m m·ªõi
        </Button>
      </Box>

      {/* Market Summary Cards */}
      {!isRealDataAvailable ? (
        <Alert severity="warning" sx={{ mb: 4 }}>
          <AlertTitle>D·ªØ li·ªáu th·ªã tr∆∞·ªùng hi·ªán t·∫°i</AlertTitle>
          ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu c·ªï phi·∫øu t·ª´ c∆° s·ªü d·ªØ li·ªáu. Yahoo Finance API hi·ªán kh√¥ng kh·∫£ d·ª•ng n√™n c√°c thay ƒë·ªïi gi√° kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c.
          <Box sx={{ mt: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>
            <Typography variant="body2" color="text.secondary">
              üìä <strong>ƒê√£ t√≠ch h·ª£p Alpha Vantage API</strong> l√†m ngu·ªìn d·ªØ li·ªáu ch√≠nh thay th·∫ø Yahoo Finance
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              üí° H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông chuy·ªÉn sang Alpha Vantage khi ƒë∆∞·ª£c c·∫•u h√¨nh API key
            </Typography>
          </Box>
        </Alert>
      ) : (
      <Grid container spacing={3} sx={{ mb: 4 }}>
        {[
          { 
            title: 'VN-Index', 
            value: marketIndices.vnIndex.value.toFixed(2), 
            change: marketIndices.vnIndex.change.toFixed(2), 
            changePercent: `${marketIndices.vnIndex.changePercent.toFixed(2)}%`, 
            color: marketIndices.vnIndex.change >= 0 ? 'success' : 'error' 
          },
          { 
            title: 'HNX-Index', 
            value: marketIndices.hnxIndex.value.toFixed(2), 
            change: marketIndices.hnxIndex.change.toFixed(2), 
            changePercent: `${marketIndices.hnxIndex.changePercent.toFixed(2)}%`, 
            color: marketIndices.hnxIndex.change >= 0 ? 'success' : 'error' 
          },
          { 
            title: 'UPCOM-Index', 
            value: marketIndices.upcomIndex.value.toFixed(2), 
            change: marketIndices.upcomIndex.change.toFixed(2), 
            changePercent: `${marketIndices.upcomIndex.changePercent.toFixed(2)}%`, 
            color: marketIndices.upcomIndex.change >= 0 ? 'success' : 'error' 
          },
          { 
            title: 'Kh·ªëi l∆∞·ª£ng GD', 
            value: `${marketIndices.totalVolume.toFixed(1)}M`, 
            change: `+${(marketIndices.totalVolume * 0.1).toFixed(1)}M`, 
            changePercent: '+8.66%', 
            color: 'info' as const 
          },
        ].map((market, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <Card elevation={2}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  {market.title}
                </Typography>
                <Typography variant="h4" fontWeight="bold" gutterBottom>
                  {market.value}
                </Typography>
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  {market.change.toString().startsWith('+') || parseFloat(market.change) >= 0 ? (
                    <TrendingUp color="success" sx={{ mr: 0.5 }} />
                  ) : (
                    <TrendingDown color="error" sx={{ mr: 0.5 }} />
                  )}
                  <Typography
                    variant="body2"
                    color={market.change.toString().startsWith('+') || parseFloat(market.change) >= 0 ? 'success.main' : 'error.main'}
                    fontWeight="medium"
                  >
                    {parseFloat(market.change) >= 0 ? '+' : ''}{market.change} ({market.changePercent})
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
      )}

      {/* Data quality warning */}
      {!isRealDataAvailable && (
        <Alert severity="info" sx={{ mb: 3 }}>
          üí° Th√¥ng tin: Gi√° c·ªï phi·∫øu hi·ªÉn th·ªã l√† d·ªØ li·ªáu ƒë√£ l∆∞u, kh√¥ng ph·∫£n √°nh bi·∫øn ƒë·ªông th·ª±c t·∫ø c·ªßa th·ªã tr∆∞·ªùng do c√°c API (Yahoo Finance, Alpha Vantage) t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng.
        </Alert>
      )}

      {/* Search and Filter Controls */}
      <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
        <Grid container spacing={3} alignItems="center">
          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              placeholder="T√¨m ki·∫øm m√£ c·ªï phi·∫øu..."
              value={searchTerm}
              onChange={handleSearch}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Search />
                  </InputAdornment>
                ),
              }}
            />
          </Grid>
          <Grid item xs={12} sm={6} md={2}>
            <FormControl fullWidth>
              <InputLabel>L·ªçc theo</InputLabel>
              <Select
                value={filterBy}
                label="L·ªçc theo"
                onChange={(e) => setFilterBy(e.target.value)}
              >
                <MenuItem value="all">T·∫•t c·∫£</MenuItem>
                <MenuItem value="gainers">TƒÉng gi√°</MenuItem>
                <MenuItem value="losers">Gi·∫£m gi√°</MenuItem>
                <MenuItem value="watchlist">Danh s√°ch theo d√µi</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={6} md={2}>
            <FormControl fullWidth>
              <InputLabel>S·∫Øp x·∫øp</InputLabel>
              <Select
                value={sortBy}
                label="S·∫Øp x·∫øp"
                onChange={(e) => setSortBy(e.target.value)}
              >
                <MenuItem value="symbol">M√£ CP</MenuItem>
                <MenuItem value="price">Gi√°</MenuItem>
                <MenuItem value="change">Thay ƒë·ªïi</MenuItem>
                <MenuItem value="volume">Kh·ªëi l∆∞·ª£ng</MenuItem>
              </Select>
            </FormControl>
          </Grid>
        </Grid>
      </Paper>

      {/* Stocks Table */}
      <Paper elevation={2}>
        <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>
          <Tab label="Danh s√°ch c·ªï phi·∫øu" />
          <Tab label="Danh s√°ch theo d√µi" />
        </Tabs>

        <TabPanel value={tabValue} index={0}>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Theo d√µi</TableCell>
                  <TableCell>M√£ CP</TableCell>
                  <TableCell>T√™n c√¥ng ty</TableCell>
                  <TableCell align="right">Gi√°</TableCell>
                  <TableCell align="right">Thay ƒë·ªïi</TableCell>
                  <TableCell align="right">%</TableCell>
                  <TableCell align="right">Kh·ªëi l∆∞·ª£ng</TableCell>
                  <TableCell align="right">Gi√° tr·ªã</TableCell>
                  <TableCell>S√†n</TableCell>
                  <TableCell>H√†nh ƒë·ªông</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {paginatedStocks.map((stock, index) => {
                  const stockData = getStockData(stock);
                  const isInWatchlist = watchlist.includes(stock.symbol);
                  
                  return (
                    <TableRow key={index} hover>
                      <TableCell>
                        <IconButton
                          onClick={() => handleToggleWatchlist(stock.symbol)}
                          color={isInWatchlist ? 'primary' : 'default'}
                        >
                          {isInWatchlist ? <Star /> : <StarBorder />}
                        </IconButton>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2" fontWeight="bold">
                          {stock.symbol}
                        </Typography>
                      </TableCell>
                      <TableCell>{stock.name}</TableCell>
                      <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                        {formatCurrency(stockData.currentPrice)}
                      </TableCell>
                      <TableCell
                        align="right"
                        sx={{
                          color: stockData.changePercent >= 0 ? 'success.main' : 'error.main',
                        }}
                      >
                        {stockData.changePercent >= 0 ? '+' : ''}{(stockData.currentPrice * stockData.changePercent / 100).toFixed(2)}
                      </TableCell>
                      <TableCell
                        align="right"
                        sx={{
                          color: stockData.changePercent >= 0 ? 'success.main' : 'error.main',
                        }}
                      >
                        {formatPercentage(stockData.changePercent)}
                      </TableCell>
                      <TableCell align="right">
                        {stockData.volume?.toLocaleString('vi-VN')}
                      </TableCell>
                      <TableCell align="right">
                        {((stockData.volume || 0) * stockData.currentPrice / 1000000).toFixed(1)}M
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={stock.exchange}
                          size="small"
                          color={stock.exchange === 'HOSE' ? 'primary' : stock.exchange === 'HNX' ? 'secondary' : 'default'}
                        />
                      </TableCell>
                      <TableCell>
                        <Button
                          size="small"
                          startIcon={<ShowChart />}
                          onClick={() => setSelectedStockSymbol(stock.symbol)}
                        >
                          Chi ti·∫øt
                        </Button>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </TableContainer>

          <TablePagination
            rowsPerPageOptions={[25, 50, 100]}
            component="div"
            count={displayStocks.length}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            onRowsPerPageChange={handleChangeRowsPerPage}
            labelRowsPerPage="S·ªë d√≤ng m·ªói trang:"
            labelDisplayedRows={({ from, to, count }) => `${from}-${to} c·ªßa ${count}`}
          />
        </TabPanel>

        <TabPanel value={tabValue} index={1}>
          {watchlist.length > 0 ? (
            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>M√£ CP</TableCell>
                    <TableCell>T√™n c√¥ng ty</TableCell>
                    <TableCell align="right">Gi√°</TableCell>
                    <TableCell align="right">Thay ƒë·ªïi</TableCell>
                    <TableCell align="right">%</TableCell>
                    <TableCell>H√†nh ƒë·ªông</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {stocks.filter(stock => watchlist.includes(stock.symbol)).map((stock, index) => {
                    const stockData = getStockData(stock);
                    
                    return (
                      <TableRow key={index} hover>
                        <TableCell>
                          <Typography variant="body2" fontWeight="bold">
                            {stock.symbol}
                          </Typography>
                        </TableCell>
                        <TableCell>{stock.name}</TableCell>
                        <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                          {formatCurrency(stockData.currentPrice)}
                        </TableCell>
                        <TableCell
                          align="right"
                          sx={{
                            color: stockData.changePercent >= 0 ? 'success.main' : 'error.main',
                          }}
                        >
                          {stockData.changePercent >= 0 ? '+' : ''}{(stockData.currentPrice * stockData.changePercent / 100).toFixed(2)}
                        </TableCell>
                        <TableCell
                          align="right"
                          sx={{
                            color: stockData.changePercent >= 0 ? 'success.main' : 'error.main',
                          }}
                        >
                          {formatPercentage(stockData.changePercent)}
                        </TableCell>
                        <TableCell>
                          <Button
                            size="small"
                            onClick={() => handleToggleWatchlist(stock.symbol)}
                          >
                            B·ªè theo d√µi
                          </Button>
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </TableContainer>
          ) : (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="body2" color="text.secondary">
                Ch∆∞a c√≥ c·ªï phi·∫øu n√†o trong danh s√°ch theo d√µi
              </Typography>
            </Box>
          )}
        </TabPanel>
      </Paper>

      {/* Stock Detail Dialog */}
      <Dialog
        open={Boolean(selectedStockSymbol)}
        onClose={() => setSelectedStockSymbol(null)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          Chi ti·∫øt c·ªï phi·∫øu {selectedStockSymbol}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ height: 400, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
            <Typography variant="body2" color="text.secondary">
              Bi·ªÉu ƒë·ªì v√† th√¥ng tin chi ti·∫øt s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y
            </Typography>
          </Box>
        </DialogContent>
      </Dialog>
    </Container>
  );
}

export default StocksPage;
